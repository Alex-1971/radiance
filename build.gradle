/*
 * Copyright (c) 2018 Radiance Kirill Grouchnikov. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  o Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  o Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 *  o Neither the name of Radiance Kirill Grouchnikov nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript {
    ext {
        kotlin_version = '1.2.51'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${rootProject.ext.kotlin_version}"
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

allprojects {
    version = '0.9-SNAPSHOT'
    ext.codename = 'Antimony'

    repositories {
        mavenCentral()
        jcenter()
    }

    defaultTasks 'build'
}

mkdir {
    "drop/${version}"
}

// Copies the compiled jars from all the sub-projects into the drop folder. The compiled
// jars are grouped into two folders: core for app-facing sub-projects (such as Trident,
// Neon, Substance, Flamingo) and demo for sub-projects that have demo or tools functionality.
task copyJars(type: Zip) {
    t ->
        delete "drop/${project.version}"
        subprojects {
            project ->
                project.afterEvaluate {
                    copy {
                        from file("${project.buildDir}/libs/${rootProject.name}-${project.name}-${project.version}.jar")
                        into file("drop/${project.version}/${project.designation}")
                    }
                }
        }
}

// Collects all the dependencies of the core sub-projects in build/libs-core
task getCoreDependencies(type: Copy) {
    into 'build/libs-core'
    from {
        subprojects.findAll { it.designation == "core" }.collect { it.configurations.runtime }
    }
}

// Collects all the dependencies of the demo sub-projects in build/libs-demo
task getDemoDependencies(type: Copy) {
    into 'build/libs-demo'
    from {
        subprojects.findAll { it.designation == "demo" }.collect { it.configurations.runtime }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.9"
}

task printRuntimeDependencies {
    doLast {
        println "Project runtime dependencies:"
        allprojects.each { p ->
            println()
            println " $p.name ".center(45, '-')
            p.configurations.findAll { it.name == "runtime" }.findAll { !it.allDependencies.empty }.each { c ->
                c.allDependencies.each { dep ->
                    println "$dep.group:$dep.name:$dep.version"
                }
            }
        }
        subprojects.each { p ->
            println " $p.name ".center(45, '-')
            p.collect { it.configurations.runtime }.each { r -> println "$r.name" }
        }
    }
}
